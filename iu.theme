<?php

/**
 * Implements hook_preprocess_html().
 */
function iu_preprocess_html(&$variables) {
  $secondary_color = theme_get_setting('secondary_color', 'iu');

  $variables['attributes']['class'][] = !empty($color_class_mappings[$secondary_color]) ? $color_class_mappings[$secondary_color] : 'none';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for blocks.
 */
function iu_theme_suggestions_block_alter(array &$suggestions, array $variables){

  // Add a template suggestion for menu blocks based on region name.
  if (isset($variables['elements']['#id']) && $variables['elements']['#base_plugin_id'] == 'system_menu_block') {

    $block_id = $variables['elements']['#id'];
    $block = \Drupal\block\Entity\Block::load($block_id);

    if ($block) {
      $region = $block->getRegion();
      $suggestions[] = $variables['theme_hook_original'] . '__' . $region;
    }
  }
}

/**
 * Prepares variables for `block--system-menu-block.html.twig`.
 */
function iu_preprocess_block__system_menu_block(&$variables){

  // Pass the region name via a custom data attribute for usage in
  // hook_preprocess_menu.
  if (isset($variables['elements']['#id'])) {
    $block_id = $variables['elements']['#id'];
    $block = \Drupal\block\Entity\Block::load($block_id);

    if ($block) {
      $region = $block->getRegion();
      $variables['content']['#attributes']['data-region'] = $region;
    }
  }
}

/**
 * Prepares variables for `menu.html.twig`.
 */
function iu_preprocess_menu(&$variables) {
  $menu_name = isset($variables['menu_name']) ? $variables['menu_name'] : '';

  // If this menu is inside a menu_block, find the region the block belongs to
  // then clean up after ourselves to remove the data attribute created in
  // hook_preprocess_block.
  $region = '';
  if (!empty($variables['attributes']['data-region'])) {
    $region  = $variables['attributes']['data-region'];
    unset($variables['attributes']['data-region']);
  }

  # Special case triggers to hide first/last menu items on desktop, and make
  # them icons on the mobile sticky menu.
  $has_search = FALSE;
  $has_home = FALSE;
  if ($region == 'primary_menu') {
    @$last = &end($variables['items']);
    if (!$last['url']->isRouted() && $last['url']->getUri() == '/search') {
      $last['attributes']->addClass('show-on-sticky search');
      $attrs = $last['url']->getOption('attributes');
      $attrs['class'][] = 'search-toggle';
      $last['url']->setOption('attributes', $attrs);
      $has_search = TRUE;
    }

    @$first = &reset($variables['items']);
    if ($first['url']->isRouted() && $first['url']->getRouteName() == '<front>') {
      $first['attributes']->addClass('show-on-sticky home');
      $has_home = TRUE;
    }
  }

  # Add first/last and two/two-left classes on all menu items.
  $i = 1;
  $count = count($variables['items']);
  foreach ($variables['items'] as &$item) {
    # The order of these if/elseifs are relevent, and prevent "last two" or
    # "first two-left" appearing on the same element.
    if (($i == $count && !$has_search) || ($i == ($count-1) && $has_search)) {
      $item['attributes']->addClass('last');
    }
    elseif (($i == 2 && !$has_home) || ($i == 3 && $has_home)) {
      $item['attributes']->addClass('two');
    }
    if (($i == 1 && !$has_home) || ($i == 2 && $has_home)) {
      $item['attributes']->addClass('first');
    }
    elseif (($i == ($count-1) && !$has_search) || ($i == ($count-2) && $has_search)) {
      $item['attributes']->addClass('two-left');
    }
    $i++;
  }
}

/**
 * Prepares variables for `menu-local-task.html.twig`.
 */
function iu_preprocess_menu_local_task(&$variables) {
  $variables['attributes']['class'][] = 'nav-item';
  $variables['link']['#options']['attributes']['class'][] = 'nav-link' . (!empty($variables['is_active']) ? ' active' : '');
}

/**
 * Prepares variables for `form.html.twig`.
 */
function iu_preprocess_form(&$variables) {

}

/**
 * Prepares variables for `input.html.twig`.
 */
function iu_preprocess_input(&$variables) {

  if (!empty($variables['element']['#button_type'])) {
    switch ($variables['element']['#button_type']) {
      case 'primary':
        $variables['attributes']['class'][] = 'primary';
        break;

      case 'danger':
        $variables['attributes']['class'][] = 'warning';
        break;
    }
  }

  $classes = &$variables['attributes']['class'];

  if (!empty($classes) && in_array('field-add-more-submit', $classes)) {
    $classes[] = 'small invert no-margin';
  }
  elseif (!empty($classes) && in_array('button', $classes)) {

    if ($variables['attributes']['value']->getUntranslatedString() == 'Remove') {
      $classes[] = 'button--remove small secondary hollow no-margin';
    }
  }
}


/**
 * Prepares variables for `input--submit--paragraph-action.html.twig`.
 */
function iu_preprocess_input__submit__paragraph_action(&$variables) {
  //var_dump($variables);
  $classes = &$variables['attributes']['class'];
  if (in_array('paragraphs-dropdown-action', $classes)) {
    $classes[] = 'tiny secondary hollow no-margin';
  }
  if (in_array('paragraphs-icon-button', $classes)) {
    $classes[] = 'tiny secondary hollow no-margin';
  }
  elseif (in_array('field-add-more-submit', $classes)) {
    $classes[] = 'small invert no-margin';
  }
}

/**
 * Prepares variables for `pager.html.twig`.
 */
function iu_preprocess_pager(&$variables) {

  // @todo backend developer code review of pager 'total' calculation
  // Needs approval from someone familiar with Drupal pagers to determine
  // whether this RegEx can be considered safe or not, or maybe there's a
  // better way to figure this out.
  if (!empty($variables['items']['last'])) {
    if (preg_match('/(\d+)/', $variables['items']['last']['href'], $matches)) {
      $variables['total'] = ((int) $matches[0]) + 1;
    }
  }
  elseif (!empty($variables['current'])) {
    $variables['total'] = $variables['current'];
  }
  else {
    $variables['total'] = t('several');
  }
}

/**
 * Helper function exposes IU secondary color palette data in a
 * multidimensional array.
 *
 * @see https://styleguide.iu.edu/visual-style/colors.html
 */
function _iu_secondary_color_palette_options() {
  return [
    'crimson' => [
      'name'=>'Crimson',
      'hex' => '#990000',
      'class' => 'bg-crimson bg-dark',
      'is_dark' => TRUE,
    ],
    'mahogany' => [
      'name'=>'Mahogany',
      'hex' => '#4a3c31',
      'class' => 'bg-mahogany bg-dark',
      'is_dark' => TRUE,
    ],
    'gold-dark' => [
      'name'=>'Dark Gold',
      'hex' => '#dc8823',
      'class' => 'bg-gold-dark',
      'is_dark' => FALSE,
    ],
    'gold' => [
      'name'=>'Gold',
      'hex' => '#f1be48',
      'class' => 'bg-gold',
      'is_dark' => FALSE,
    ],
    'mint-dark' => [
      'name'=>'Dark Mint',
      'hex' => '#285c4d',
      'class' => 'bg-mint-dark bg-dark',
      'is_dark' => TRUE,
    ],
    'mint' => [
      'name'=>'Mint',
      'hex' => '#008264',
      'class' => 'bg-mint bg-dark',
      'is_dark' => TRUE,
    ],
    'midnight-dark' => [
      'name'=>'Dark Midnight',
      'hex' => '#01426a',
      'class' => 'bg-midnight-dark bg-dark',
      'is_dark' => TRUE,
    ],
    'midnight' => [
      'name'=>'Midnight',
      'hex' => '#006298',
      'class' => 'bg-midnight bg-dark',
      'is_dark' => TRUE,
    ],
    'majestic-dark' => [
      'name'=>'Dark Majestic',
      'hex' => '#512a44',
      'class' => 'bg-majestic-dark bg-dark',
      'is_dark' => TRUE,
    ],
    'majestic' => [
      'name'=>'Majestic',
      'hex' => '#66435a',
      'class' => 'bg-majestic bg-dark',
      'is_dark' => TRUE,
    ],
    'limestone-dark' => [
      'name'=>'Dark Limestone',
      'hex' => '#83786f',
      'class' => 'bg-limestone-dark bg-dark',
      'is_dark' => TRUE,
    ],
    'limestone' => [
      'name'=>'Limestone',
      'hex' => '#aca39a',
      'class' => 'bg-limestone',
      'is_dark' => FALSE,
    ],
    'black' => [
      'name'=>'Black',
      'hex' => '#191919',
      'class' => 'bg-black bg-dark',
      'is_dark' => TRUE,
    ],
    'gray' => [
      'name'=>'Light Gray',
      'hex' => '#edebeb',
      'class' => 'bg-gray',
      'is_dark' => FALSE,
    ],
    'none' => [
      'name'=>'None',
      'hex' => '#fff',
      'class' => 'bg-none',
      'is_dark' => FALSE,
    ],
  ];
}
